Quick Start
Install repo command from Google if not available on your host system. Please follow the official instructions by Google.

Then install a number of packages for BitBake (OE build tool) to work properly on your host system. BitBake itself depends on Python 3. Once you have Python 3 installed BitBake should be able to tell you most of the missing packages.

For Ubuntu 18.04 (or newer) install python3-distutils package.

Detailed instructions for various distributions can be found in "Required Packages for the Build Host" section in Yocto Project Reference Manual.


Creating Workspace
This needs to be done every time you want a clean setup based on the latest layers.

mkdir riscv-sifive && cd riscv-sifive
repo init -u git://github.com/sifive/meta-sifive -b 2021.09 -m tools/manifests/sifive.xml
(here may hit some problem about python, try below command:
$ mkdir -p ~/.bin
$ PATH="${HOME}/.bin:${PATH}"
$ curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
$ chmod a+rx ~/.bin/repo
And then execute the repo init command.
)
repo sync

Getting Build Tools (optional)

OpenEmbedded-Core requires GCC 6 or newer to be available on the host system.
Your host system might have an older version of GCC if you use LTS (Long Term Support) Linux distribution (e.g. Ubuntu 16.04.6 has GCC 5.4.0).
You could solve this issue by installing build tools. This requires less than 400MB of disk space. You can download pre-built one or build your own build tools.

Option 1: Installing OpenEmbedded-Core Build Tools (Pre-Built)
./openembedded-core/scripts/install-buildtools -r yocto-3.2_M2 -t 20200729
The native SDK will be installed under $BUILDDIR/../openembedded-core/buildtools prefix.

Finally you should be able to use build tools:

. ./openembedded-core/buildtools/environment-setup-x86_64-pokysdk-linux


Option 2: Building Your Own Build Tools
Your host needs to have GCC 6 (or newer) or build tools installed from Option 1.

You can find pre-built tools from the same release source in GitHub release assets.

To build your own build tools execute the command below:

bitbake buildtools-extended-tarball
You can find the native SDK under $BUILDDIR/tmp-glibc/deploy/sdk/ directory.

Now you can install build tools:

$BUILDDIR/tmp-glibc/deploy/sdk/x86_64-buildtools-extended-nativesdk-standalone-nodistro.0.sh -d $BUILDDIR/../openembedded-core/buildtools -y
Finally you should be able to use your build tools:

. $BUILDDIR/../openembedded-core/buildtools/environment-setup-x86_64-oesdk-linux


Setting up Build Environment
This step has to be done after you modify your environment with toolchain you want to use otherwise wrong host tools might be available in the package build environment. For example, gcc from host system will be used for building *-native packages.

. ./meta-sifive/setup.sh  //(in this step may need to install some required tools)
You can verify and fix your host tools by checking symlinks in $BUILDDIR/tmp-glibc/hosttools directory.

Configuring BitBake Parallel Number of Tasks/Jobs
There are 3 variables that control the number of parallel tasks/jobs BitBake will use: BB_NUMBER_PARSE_THREADS, BB_NUMBER_THREADS and PARALLEL_MAKE. The last two are the most important, and both are set to number of cores available on the system. You can set them in your $BUILDDIR/conf/local.conf or in your shell environment similar to how MACHINE is used (see next section). Example:

PARALLEL_MAKE="-j 4" BB_NUMBER_THREADS=4 MACHINE=freedom-u540 bitbake demo-coreip-cli
Leaving defaults could cause high load averages, high memory usage, high IO wait and could make your system unresponsive due to resources overuse. The defaults should be changed based on your system configuration.

Building Disk Images
There are two disk image targets added by meta-sifive layer:

demo-coreip-cli - basic command line image (recommended);

demo-coreip-xfce4 - basic graphical disk image with Xfce 4 desktop environment.

By default disk images do not include debug packages. If you want to produce disk images with debug packages append -debug (e.g. demo-coreip-cli-debug) to the disk image target.

There are several machine targets defined:

qemuriscv64 - RISC-V 64-bit (RV64GC) for QEMU virt machine (recommended for QEMU target).
qemuriscv64_b- RISCV-V 64-bit (RV64GC) with B extension (not ratified yet) for QEMU virt machine.
qemuriscv64_b_zfh - RISC-V-64-bit (RV64GC) with B and Zfh extensions (both not ratified yet) for QEMU virt machine.
qemuriscv64_v - RISC-V 64-bit (RV64GC) with V extension (not ratified yet) for QEMU virt machine.
freedom-u540 - SiFive HiFive Unleashed development board.
unmatched - SiFive HiFive Unmatched development board.
The QEMU machines with the additional extensions (i.e. beyond RV64GC) do not affect how packages or/and disk images are built. This means the toolchain might not provide support for the new extensions. By default packages are not built with the new instructions enabled.

Building disk images is CPU intensive, could require <10GB of sources downloaded over the Internet and <200GB of local storage.

Building disk image takes a single command which may take anything from 30 minutes to several hours depending on your hardware. Examples:

MACHINE=qemuriscv64 bitbake demo-coreip-cli
MACHINE=freedom-u540 bitbake demo-coreip-cli
MACHINE=unmatched bitbake demo-coreip-xfce4
